// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherEF;

namespace WeatherEF.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherEF.Day", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("LocationZip");

                    b.Property<int>("LocationZipID");

                    b.Property<DateTime>("Sunrise");

                    b.Property<DateTime>("Sunset");

                    b.HasKey("DayID");

                    b.HasIndex("LocationZip");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("WeatherEF.Location", b =>
                {
                    b.Property<int>("Zip")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("TimeZone");

                    b.HasKey("Zip");

                    b.ToTable("Location");

                    b.HasData(
                        new { Zip = 98177, City = "Seattle", Latitude = 47.75m, Longitude = -122.37m, TimeZone = "Pacific Standard Time" },
                        new { Zip = 90004, City = "Los Angeles", Latitude = 34.08m, Longitude = -118.3m, TimeZone = "Pacific Standard Time" },
                        new { Zip = 80904, City = "Colorado Springs", Latitude = 38.85m, Longitude = -104.86m, TimeZone = "Mountain Standard Time" }
                    );
                });

            modelBuilder.Entity("WeatherEF.Reading", b =>
                {
                    b.Property<int>("ReadingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Clouds");

                    b.Property<int>("DayID");

                    b.Property<int>("LocationZipID");

                    b.Property<DateTime>("ReadingDateTime");

                    b.Property<decimal>("Temperature");

                    b.Property<int>("WeatherTypeID");

                    b.Property<short>("WindDirection");

                    b.Property<decimal>("WindGust");

                    b.Property<decimal>("WindSpeed");

                    b.HasKey("ReadingID");

                    b.HasIndex("DayID");

                    b.HasIndex("LocationZipID");

                    b.HasIndex("WeatherTypeID");

                    b.ToTable("Reading");
                });

            modelBuilder.Entity("WeatherEF.WeatherType", b =>
                {
                    b.Property<int>("WeatherTypeID");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("WeatherTypeID");

                    b.ToTable("WeatherType");
                });

            modelBuilder.Entity("WeatherEF.Day", b =>
                {
                    b.HasOne("WeatherEF.Location")
                        .WithMany("Day")
                        .HasForeignKey("LocationZip");
                });

            modelBuilder.Entity("WeatherEF.Reading", b =>
                {
                    b.HasOne("WeatherEF.Day")
                        .WithMany("Readings")
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeatherEF.Location", "Location")
                        .WithMany("Reading")
                        .HasForeignKey("LocationZipID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeatherEF.WeatherType")
                        .WithMany("Readings")
                        .HasForeignKey("WeatherTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
